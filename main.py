import logging
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from data import db_session
from data.metrics import Metrics
import random
import aiohttp

# from telegram.ext import ApplicationBuilder
BOT_TOKEN = '6188292983:AAEiOG7lgCOOUT85Sam83Zq2q_55U1N2ZV0'

conditions_good = ['—Ö–æ—Ä–æ—à', '–æ—Ç–ª–∏—á–Ω', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω', '–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω', '–ø–æ–π–¥–µ—Ç', '—Å–ª–∞–≤–Ω–æ',
                   '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏', '—Å–∫–∞–∑–æ—á–Ω', '–Ω–∞ 5 —Å –ø–ª—é—Å–æ–º', '–Ω–µ–ø–ª–æ—Ö–æ', '—Å—É–ø–µ—Ä', '–∫—Ä—É—Ç–æ']

conditions_bad = ['–ø–ª–æ—Ö', '—É–∂–∞—Å–Ω', '–≥—Ä—É—Å—Ç–Ω', '–ø–µ—á–∞–ª—å–Ω', '–æ–¥–∏–Ω–æ–∫', '–ø—Ä–æ—Ç–∏–≤–Ω', '–º–µ—Ä–∑–∫', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω',
                  '—É–≥–Ω–µ—Ç–∞—é—â–µ', '–≥–Ω–µ—Ç—É—â–µ', '–Ω–µ –æ—á–µ–Ω—å', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–Ω', '–±–µ–∑—ã—Å—Ö–æ–¥–Ω' '–ø–∞—Ä—à–∏–≤']

alfabet = list('abcdefghijklmnopqrstuvwxyz–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è ')

hello = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é',
         '–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫', '–±–æ–Ω–∂—É—Ä', '–Ω–∞–º–∞—Å—Ç–µ', 'hello', 'hi', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å',
         '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä–æ–π –Ω–æ—á–∏', '—É—Ç—Ä–µ—á–∫–æ']

answer_for_hello = ['–ü—Ä–∏–≤–µ—Ç', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é',
                    '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫', '–ë–æ–Ω–∂—É—Ä', '–ù–∞–º–∞—Å—Ç–µ', '–†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å',
                    '–•–∞–π']

hau = ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–π',
       '–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—Ç–µ', '–∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ', '–∫–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å', '–∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ']

mates = ['—Å—É–∫–∞', '–Ω–∞—Ö—É–π', '–±–ª—è—Ç—å', '–ø–∏–∑–¥–µ—Ü', '–ø–∏–∑–¥–∞', '–µ–±–∞—Ç—å', '–∑–∞–µ–±–∏—Å—å', '–ø–∏–¥–æ—Ä', '—Ö—É–π', '–ø–∏–¥–æ—Ä–∞—Å']

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)


def main():
    # proxy_url = "socks5://user:pass@host:port"
    # app = ApplicationBuilder().token(BOT_TOKEN).proxy_url(proxy_url).build()
    db_session.global_init('db/metrix.db')
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("help", help_))
    application.add_handler(CommandHandler("close", close_keyboard))
    application.add_handler(CommandHandler("site", site))
    application.add_handler(CommandHandler("about", about))
    application.add_handler(CommandHandler("posts", posts))
    application.add_handler(CommandHandler("events", events))

    conv_handler1 = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            '1_start': [MessageHandler(filters.TEXT & ~filters.COMMAND, first_response_start)],
            '2_start': [MessageHandler(filters.TEXT & ~filters.COMMAND, second_response_start)],
            '3_start': [MessageHandler(filters.TEXT & ~filters.COMMAND, third_response_start)]
        },
        fallbacks=[CommandHandler("stop", stop)]
    )

    conv_handler2 = ConversationHandler(
        entry_points=[CommandHandler("answers", answers)],
        states={
            '1_answer': [MessageHandler(filters.TEXT & ~filters.COMMAND, first_response_answer)],
            '2_answer': [MessageHandler(filters.TEXT & ~filters.COMMAND, second_response_answer)],
            '3_answer': [MessageHandler(filters.TEXT & ~filters.COMMAND, third_response_answer)],
            '4_answer': [MessageHandler(filters.TEXT & ~filters.COMMAND, fourth_response_answer)]
        },
        fallbacks=[CommandHandler("stop", stop)]
    )
    application.add_handler(conv_handler1)
    application.add_handler(conv_handler2)
    application.add_handler(MessageHandler(filters.TEXT, dialog))
    application.run_polling()


async def events(update, _):
    db_sess = db_session.create_session()
    metric = db_sess.query(Metrics).first()
    info = metric.events
    metric = db_sess.query(Metrics).filter(Metrics.id == 1).first()
    metric.event = info + 1
    db_sess.commit()

    event_api_url = "http://127.0.0.1:8080/api/blog"
    response = await get_response(event_api_url, params={
        "apikey": "Your Api key",
        "format": "json"
    })

    if not response:
        await update.message.reply_text('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞!')
    else:
        for i in response:
            await update.message.reply_text(i)


async def dialog(update, _):
    phrase = []

    for char in list(update.message.text.lower()):
        if char.lower() in alfabet:
            phrase.append(char)
    phrase = ''.join(phrase)

    for word_hello in hello:
        if word_hello in phrase:
            await update.message.reply_text(f'{answer_for_hello[random.randrange(0, 11)]}')
            break


async def start(update, context):
    db_sess = db_session.create_session()
    metric = db_sess.query(Metrics).first()
    info = metric.start
    metric = db_sess.query(Metrics).filter(Metrics.id == 1).first()
    metric.start = info + 1
    db_sess.commit()

    user = update.effective_user
    context.user_data['change_len_name'] = False
    context.user_data['name'] = user.mention_html().split('>')[1].split('<')[0]
    reply_keyboard = [['–¥–∞', '–Ω–µ—Ç']]

    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

    await update.message.reply_text(
        f"{answer_for_hello[random.randrange(0, len(answer_for_hello))]}"
        f" {context.user_data['name']}üëã.\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –±–æ—Ç –ò–ª—å—è—Å.",
        reply_markup=markup
    )
    await update.message.reply_text(f"–ú–æ–≥—É –ª–∏ —è –Ω–∞–∑—ã–≤–∞—Ç—å –≤–∞—Å {user.mention_html().split('>')[1].split('<')[0]}?\n"
                                    f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –∏–º—è –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞'\n–Ω—É –∞ –µ—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'")
    return '1_start'


async def first_response_start(update, context):
    user = update.effective_user
    reply_keyboard = [['/posts', '/events', '/about', '/answers'],
                      ['/site', '/start', '/close', '/stop']]

    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    if update.message.text == '–¥–∞' or context.user_data['change_len_name']:
        await update.message.reply_text('–í–ø–∏—à–∏—Ç–µ –∏–º—è –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ', reply_markup=markup)
        context.user_data['change_len_name'] = False
        return '3_start'

    elif update.message.text == '–Ω–µ—Ç':
        context.user_data['name'] = user.mention_html().split('>')[1].split('<')[0]
        await update.message.reply_text(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è {context.user_data["name"]}', reply_markup=markup)
        await update.message.reply_text(f' {hau[random.randrange(0, len(hau))]}?', reply_markup=markup)
        return '2_start'

    else:
        await update.message.reply_text('–ï—â–µ —Ä–∞–∑–æ–∫ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"', reply_markup=markup)
        return '1_start'


async def second_response_start(update, _):
    phrase = []

    for char in list(update.message.text.lower()):
        if char.lower() in alfabet:
            phrase.append(char)
    phrase = ''.join(phrase)

    mate_flag = False

    for mate in mates:
        if mate in phrase:
            await update.message.reply_text('–Ø –≤–∞—Å –ø—Ä–æ—à—É –≥–ª—É–±–æ–∫–æ –≤–¥–æ—Ö–Ω–∏—Ç–µ, –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ –∏ –±–æ–ª—å—à–µ –Ω–µ –º–∞—Ç–µ—Ä–∏—Ç–µ—Å—å')
            mate_flag = True
            break

    if not mate_flag:
        bad_flag = False
        for condition in conditions_bad:
            if condition in phrase:
                await update.message.reply_text('–°–æ—á—É–≤—Å—Ç–≤—É—é –≤–∞–º, –µ—Å–ª–∏ —Ç–∞–∫ –±—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, —Ç–æ —è –¥—É–º–∞—é –≤–∞–º '
                                                '–±—ã —Å—Ç–æ–∏–ª–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º –æ–Ω–∏ —Ç–æ—á–Ω–æ –≤–∞–º –ø–æ–º–æ–≥—É—Ç!')
                bad_flag = True
                break

        if not bad_flag:
            for condition in conditions_good:
                if condition in phrase:
                    await update.message.reply_text('–Ø –æ—á–µ–Ω—å –∑–∞ –≤–∞—Å —Ä–∞–¥!')
                    break
        await update.message.reply_text('–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ —è –º–æ–≥—É?\n–ï—Å–ª–∏ –¥–∞ —Ç–æ –≤–∞–º —Å—é–¥–∞ /help')
        return ConversationHandler.END


async def third_response_start(update, context):
    if len(update.message.text) >= 10:
        await update.message.reply_text('–î—Ä—É–∂–∏—â–µ —Ç–≤–æ–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ,\n–¥–∞–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å —É–º–µ—â–∞—é—â–µ–µ—Å—è –≤ 10 —Å–∏–º–≤–æ–ª–æ–≤')
        context.user_data['change_len_name'] = True
        return '2_start'
    context.user_data['name'] = update.message.text
    await update.message.reply_text(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è {update.message.text}')
    await update.message.reply_text(f' {hau[random.randrange(0, len(hau))]}?')
    return '2_start'


async def help_(update, _):
    db_sess = db_session.create_session()
    metric = db_sess.query(Metrics).first()
    info = metric.help
    metric = db_sess.query(Metrics).filter(Metrics.id == 1).first()
    metric.help = info + 1
    db_sess.commit()

    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞\n/close - –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n/stop - –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞\n\n"
        "/answer - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —ç–∫—Å–ø–µ—Ä—Ç—É\n/posts - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –∏–∑ –±–ª–æ–≥–∞\n/events - –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π\n"
        "/about - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å\n/site - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞—à –Ω–∞ —Å–∞–π—Ç\n\n/help - –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")


async def close_keyboard(update, _):
    db_sess = db_session.create_session()
    metric = db_sess.query(Metrics).first()
    info = metric.close
    metric = db_sess.query(Metrics).filter(Metrics.id == 1).first()
    metric.close = info + 1
    db_sess.commit()

    await update.message.reply_text(
        "Ok",
        reply_markup=ReplyKeyboardRemove()
    )


async def site(update, _):
    db_sess = db_session.create_session()
    metric = db_sess.query(Metrics).first()
    info = metric.site
    metric = db_sess.query(Metrics).filter(Metrics.id == 1).first()
    metric.site = info + 1

    db_sess.commit()
    user = update.effective_user
    await update.message.reply_text(f"{user.mention_html().split('>')[1].split('<')[0]} —ç—Ç–æ –Ω–∞—à —Å–∞–π—Ç,\n"
                                    "–ø–µ—Ä–µ—Ö–æ–¥–∏, —Ç–∞–º —Ç–∞–∫ –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∏"
                                    " –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æüëá\n http://127.0.0.1:8080/")


async def about(update, _):
    db_sess = db_session.create_session()
    metric = db_sess.query(Metrics).first()
    info = metric.about
    metric = db_sess.query(Metrics).filter(Metrics.id == 1).first()
    metric.about = info + 1
    db_sess.commit()

    await update.message.reply_text("Mindease\n–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å"
                                    " –ø–æ–¥—Ä–æ—Å—Ç–∫–∞–º,\n–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏.\n"
                                    " –ü—Ä–æ–≤–æ–¥–∏–º —á–∞—Å—Ç–Ω—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏"
                                    " —Å–µ–º–∏–Ω–∞—Ä—ã —Å —Ü–µ–ª—å—é –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏—è–º–∏.\n"
                                    " –ù–∞—à–∞ —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –≤—ã–∂–∏–≤–∞–Ω–∏—è –∏"
                                    " –¥–æ—Å—Ç–∏—á—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∂–∏–∑–Ω–∏.\n\n–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ?\n–¢–æ–≥–¥–∞ —Å–∫–æ—Ä–µ–π –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ"
                                    " —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Çüëá\n http://127.0.0.1:8080/")


async def posts(update, _):
    db_sess = db_session.create_session()
    metric = db_sess.query(Metrics).first()
    info = metric.posts
    metric = db_sess.query(Metrics).filter(Metrics.id == 1).first()
    metric.posts = info + 1
    db_sess.commit()

    blog_api_url = "http://127.0.0.1:8080/api/blog"
    response = await get_response(blog_api_url, params={
        "apikey": "Your Api key",
        "format": "json"
    })

    if not response:
        await update.message.reply_text('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞!')
    else:
        for i in response:
            await update.message.reply_text(i)


async def answers(update, context):
    db_sess = db_session.create_session()
    metric = db_sess.query(Metrics).first()
    info = metric.answers
    metric = db_sess.query(Metrics).filter(Metrics.id == 1).first()
    metric.answers = info + 1
    db_sess.commit()

    await update.message.reply_text(f'–ò—Ç–∞–∫ {context.user_data["name"]} —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ—á—Ç—É,\n'
                                    '–Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.\n'
                                    '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–¥–∞–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop')
    return '1_answer'


async def first_response_answer(update, context):
    context.user_data['email'] = update.message.text
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ {context.user_data['name']} –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å")
    return '2_answer'


async def second_response_answer(update, context):
    context.user_data['answer'] = update.message.text
    reply_keyboard = [['–¥–∞', '–ø–æ—á—Ç–∞', '—Å–∞–º –≤–æ–ø—Ä–æ—Å']]

    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ {context.user_data['name']} —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å –≤—Å–µ –ª–∏ —Ç—ã —É–∫–∞–∑–∞–ª –≤–µ—Ä–Ω–æ:\n"
                                    f"–ò–º—è -- {context.user_data['name']}\n"
                                    f"–ü–æ—á—Ç–∞ -- {context.user_data['email']}\n"
                                    f"–í–æ–ø—Ä–æ—Å-- {context.user_data['answer']}\n\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ —Ç–æ –Ω–∞–ø–∏—à–∏ '–¥–∞' –µ—Å–ª–∏ –Ω–µ—Ç,"
                                    f" —Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–µ–º –æ–ø–∏—Å–∞–ª—Å—è\n"
                                    f"–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏", reply_markup=markup)
    return '3_answer'


async def third_response_answer(update, context):
    if update.message.text.lower() == '–¥–∞':
        answers_api_url = "http://127.0.0.1:8080/api/add_answer"
        email = context.user_data['email']
        name = context.user_data['name']
        answer = context.user_data['answer']
        response = await get_response(answers_api_url, params={
            "apikey": "Your Api key",
            "format": "json",
            "email": email,
            "name": name,
            "answer": answer
        })
        reply_keyboard = [['/posts', '/events', '/about', '/answers'],
                          ['/site', '/start', '/close', '/stop']]

        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
        if not response:
            await update.message.reply_text('–¢—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏', reply_markup=markup)
        for key in response:
            if key == 'success':
                await update.message.reply_text('–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –±—É–¥—É—Ç –µ—â–µ –ø–∏—à–∏—Ç–µ, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å',
                                                reply_markup=markup)
                return ConversationHandler.END

            elif key == 'error':
                await update.message.reply_text('–ü—Ä–æ—Å—Ç–∏—Ç–µ –∫–∞–∫–∏–µ-—Ç–æ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                                                reply_markup=markup)
                return ConversationHandler.END
            else:
                await update.message.reply_text('–¢—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏', reply_markup=markup)
                return ConversationHandler.END

    elif update.message.text.lower() == '–ø–æ—á—Ç–∞':
        context.user_data['change'] = 'email'
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–æ—á—Ç—É')
        return '4_answer'

    elif update.message.text.lower() == '–≤–æ–ø—Ä–æ—Å':
        context.user_data['change'] = 'answer'
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å')
        return '4_answer'


async def fourth_response_answer(update, context):
    if context.user_data['change'] == 'email':
        context.user_data['email'] = update.message.text
    elif context.user_data['change'] == 'answer':
        context.user_data['answer'] = update.message.text
    await update.message.reply_text(f"–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª, –æ–±—Ä–∞–±–æ—Ç–∞–ª")

    answers_api_url = "http://127.0.0.1:8080/api/add_answer"
    email = context.user_data['email']
    name = context.user_data['name']
    answer = context.user_data['answer']
    response = await get_response(answers_api_url, params={
        "apikey": "Your Api key",
        "format": "json",
        "email": email,
        "name": name,
        "answer": answer
    })
    reply_keyboard = [['/posts', '/events', '/about', '/answers'],
                      ['/site', '/start', '/close', '/stop']]

    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)

    for key in response:
        if key == 'success':
            await update.message.reply_text('–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –±—É–¥—É—Ç –µ—â–µ –ø–∏—à–∏—Ç–µ, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å',
                                            reply_markup=markup)
            return ConversationHandler.END

        elif key == 'error':
            await update.message.reply_text('–ü—Ä–æ—Å—Ç–∏—Ç–µ –∫–∞–∫–∏–µ-—Ç–æ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                                            reply_markup=markup)
            return ConversationHandler.END
        else:
            await update.message.reply_text('–¢—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏', reply_markup=markup)
            return ConversationHandler.END


async def stop(update, context):
    db_sess = db_session.create_session()
    metric = db_sess.query(Metrics).first()
    info = metric.stop
    metric = db_sess.query(Metrics).filter(Metrics.id == 1).first()
    metric.stop = info + 1
    db_sess.commit()
    reply_keyboard = [['/posts', '/events', '/about', '/answers'],
                      ['/site', '/start', '/close', '/stop']]

    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    await update.message.reply_text(f"–•–æ—Ä–æ—à–æ, {context.user_data['name']}, –¥–∏–∞–ª–æ–≥ –æ–∫–æ–Ω—á–µ–Ω", reply_markup=markup)
    return ConversationHandler.END


async def get_response(url, params):
    logger.info(f"getting {url}")
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            return await resp.json()


if __name__ == '__main__':
    main()
